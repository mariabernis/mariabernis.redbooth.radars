{"result": [{"status": "Open", "resolved": "", "product": "Documentation", "description": "Xcode autocompletes 'UIUpgradeOtherBundleIdentifier' (as 'Upgrade other bundle identifier' in human-description mode) when editing plist files, but no mention of it can be found in documentation or DevForums. An official explanation of what this key is and does would be appreciated.", "classification": "", "title": "Please document UIUpgradeOtherBundleIdentifier", "originated": "12/30/2010", "product_version": "", "number": "8810340", "user": "matt@bookhousesoftware.com", "reproducible": "", "id": 992401}, {"status": "Verify / Duplicate", "resolved": "", "product": "iPhone SDK", "description": "UPDATE 7/6/10: Duplicate of 8162995 (invisible).\r\n\r\nSummary:\r\nPlease provide an application:handleOpenURLWithOptions: or equivalent method that provides the same URL-related context that is passed to application:didFinishLaunchingWithOptions:\r\n\r\napplication:didFinishLaunchingWithOptions: includes the source of a URL event, which is useful information that makes interesting IPC possible. It was also a single guaranteed point of entry on 3.x, because apps were always quit and relaunched. Therefore this delegate method was always called on third party apps when handling URLs from external sources.\r\n\r\nThe presence of multitasking in 4.x means that these apps may still be running, and there are now two possible points of entry for URL handling:\r\n\r\n1) application:didFinishLaunchingWithOptions:\r\n2) application:handleOpenURL:\r\n\r\nIf application:handleOpenURL: is sent to a suspended app on 4.0, the source application is unknown. This is a loss in functionality from 3.x and may even cause binary compatibility issues for a pair of apps that were using UIApplicationLaunchOptionsSourceApplicationKey to go back and forth. Please provide this information in all present and future API involving URLs.\r\n\r\nThe current situation also creates a problem of \"double-handling:\" if the app cares about launch info, then it will implement application:didFinishLaunchingWithOptions:, but it now also must implement application:handleOpenURL:. The app now gets two callbacks for a single URL unless it does something that doesn't quite feel right (falsely return NO from the launch method, maintain a fragile ivar or timer, etc).  A new handleOpenURLWithOptions: API would negate the need to do URL handling in application:didFinishLaunchingWithOptions:\r\n\r\nRegression:\r\n8A293 / 10M2262. Non-issue prior to 4.x.\r\n\r\nNotes:\r\nPlease do this for 4.1 so we don't lose too much time in this conundrum. Third parties will quickly concoct bizarre algorithms for this, resulting in much larger binary compatibility problems down the road. It would also be appropriate for this problem to be solved in the very first 4.x iPad release.", "classification": "", "title": "Need parity between URL handling API", "originated": "7/6/10", "product_version": "", "number": "8163065", "user": "matt@bookhousesoftware.com", "reproducible": "", "id": 493401}, {"status": "", "resolved": "", "product": "Developer Tools", "description": "Summary:\r\nLLDB sometimes fails to autocomplete category methods depending on where they appear in the source. It appears that anything declared before the target class' @implementation is processed makes the cut, whereas anything declared after it, or not explicitly imported before it, does not.\r\n\r\nThe attached project has a number of schemes/targets to illustrate a number of scenarios that do and don't trigger autocompletion from the LLDB prompt in Xcode 6.1 (6A1052d)\r\n\r\nSteps to Reproduce:\r\n1. Check out or download the LLDBSymbols project at https://github.com/drance/radars/tree/LLDBSymbols\r\n2. Select a scheme, e.g. \"InternalCategory-NoInterface\"\r\n3. Run the project\r\n4. Tap the 'Press Here' button\r\n5. When LLDB prompt appears, type 'p [self inter' and wait. You should be offered the \"internalMethod\" symbol which appears in the view controller's implementation.\r\n6. Type 'p [self cat' and wait. Depending on the target (see below), you may or may not get autocompletion.\r\n\r\nEach scheme in the project corresponds to a different target using a variation of the main View Controller, each with a shared breakpoint that you should hit whenever you press the button.\r\n\r\nThe various implementation files, such as \"ViewControllerNoInterface.m\", has instructions in the -breakAction: method where the breakpoint is set. So, when you hit the breakpoint, and the LLDB prompt appears, you should be staring at instruction comments on what to do.\r\n\r\nExpected Results:\r\nExpect to always be offered 'categoryMethod' as autocompletion for '[self cat'\r\n\r\nActual Results:\r\nAutocompletion for the category method only happens if the conditions outlined in the problem description are met. As of 6A1052d, the targets / schemes that succeed are:\r\n\r\nInternalCategory-EarlyInterface\r\nInternalCategory-EarlyImplementation\r\nExternalCategory-Import\r\n\r\nThe others fail.\r\n\r\nVersion:\r\n6.1 (6A1052d) on 10.10.1 (14B25)", "classification": "Other Bug", "title": "6A1052d: LLDB autocomplete misses some category declarations", "originated": "12/1/14", "product_version": "6.1 (6A1052d)", "number": "19111358", "user": "matt@bookhousesoftware.com", "reproducible": "Always", "id": 5878288266297344}, {"status": "Open", "resolved": "", "product": "iOS SDK", "description": "The attached project has a parent view controller that supports portrait orientation only. It presents a modal view controller that supports all orientations. When rotating the modal view to landscape, then dismissing it, the presenting view, which does not support landscape orientation, is forced into landscape anyway.\r\n\r\nThis only happens when built with the iOS 8 SDK and running on iOS 8. This does not happen when run on iOS 7, or on iOS 8 when built with a pre-8 SDK.\r\n\r\nThis is certainly a regression from iOS 7, and possibly from earlier betas of iOS 8, but I don't have the capability of confirming that.\r\n\r\nThe primary and very common use case here is a portrait-only design with the exception of video playback, which permits landscape.\r\n\r\nPlease advise a workaround if this problem cannot or will not be fixed. The only ones I can think of are:\r\n\r\n1) Force portrait-only video playback (not at all desirable)\r\n2) Keep building with the iOS 7 SDK in the near-term (not at all desirable)\r\n\r\nSteps to Reproduce:\r\nWith Xcode 6:\r\n\r\n1. Run the attached project. Note the root VC does not rotate\r\n2. Hit the \"Show Basic Rotatable View\" button from portrait orientation\r\n3. Rotate to landscape after the modal view shows\r\n4. Hit the \"Back\" button\r\n\r\nExpected Results:\r\nInitial view remains in portrait, as on iOS 7.\r\n\r\nActual Results:\r\nInitial view does not remain in portrait.\r\n\r\nVersion:\r\nXcode 6A280e / iOS 12A4345d", "classification": "Serious Bug", "title": "6A280e / 12A4345d: Presenting view controllers rotate to unsupported orientations", "originated": "8.29.2014", "product_version": "6A280e / 12A4345d", "number": "18176955", "user": "matt@bookhousesoftware.com", "reproducible": "Always", "id": 5225608728543232}, {"status": "Open", "resolved": "", "product": "iOS SDK", "description": "Summary:\r\nSLComposeViewController has no error structure for reporting bad twitter credentials (HTTP 401 from Twitter), and does not provide useful information to the user when it fails.\r\n\r\nI have multiple accounts in Settings > Twitter: one authenticated, the other not. Presumably because I have one account logged in, [SLComposeViewController isAvailableForServiceType: SLServiceTypeTwitter] returns YES.\r\n\r\nIf I then select the unauthorized account and try to tweet, I get a vague \"connection to Twitter failed\" message. The console, however, reports that a 401 auth error came back from Twitter.\r\n\r\nThere are two problems here:\r\n\r\n1) The user isn't told how to fix the problem (Go to Settings > Twitter and re-enter user/pass)\r\n2) The API does report or return errors\r\n\r\nSo neither the developer nor the user are receiving the information they need to improve the situation.\r\n\r\nIt's also unclear how this happens in the first place. Settings does not let you save a Twitter account without successfully authenticating, so it sounds like someone is resetting auth tokens after the fact. Whether this is iOS (device-side) or Twitter (server-side) is unclear, but it spans versions and devices. I have other devices that are working just fine with all accounts.\r\n\r\nVerified on:\r\n\r\niPhone 5, iOS 6.1.4\r\niPhons 5s, iOS 7.0.2\r\n\r\nSteps to Reproduce:\r\n1. Add multiple accounts to Settings > Twitter\r\n2. Break or expire credentials for one of the accounts (unclear how or why this can happen)\r\n3. Try tweeting a photo from Photos / Camera with the broken account\r\n\r\nExpected Results:\r\nExpect the tweet to work, or to see actionable information on how to fix the auth problem.\r\n\r\nActual Results:\r\n\"The tweet cannot be sent because the connection to Twitter failed.\" (see attached pic)\r\n\r\nAlso attached device log output reporting the 401 auth failure from Twitter.\r\n\r\nVersion:\r\niPhone 5, iOS 6.1.4\r\niPhons 5s, iOS 7.0.2\r\n\r\nNotes:\r\nSavvy users will be able to experiment and figure out what's wrong, but this could be a lot better on both user and API fronts.", "classification": "Serious But", "title": "SLComposeViewController hides Twitter auth errors", "originated": "11/5/2013", "product_version": "6+7", "number": "15394622", "user": "matt@bookhousesoftware.com", "reproducible": "Always", "id": 5262535380959232}, {"status": "Open", "resolved": "", "product": "iPhone SDK", "description": "Summary:\r\niOS 6 Smart Banners only work if the device has an App Store installation of the app in question. To-be-released products, and even Xcode builds of existing products, are not recognized by the smart banner machinery.\r\n\r\nSteps to Reproduce:\r\n0) Uninstall any copies of the app to be tested\r\n1) Build and run your smart-banner-supporting app from Xcode\r\n2) Go to your website with smart banner metadata\r\n3) Note the VIEW button, which takes you to the App Store, rather than OPEN\r\n4) Install the app from the App Store\r\n5) Repeat 1)\r\n\r\nExpected Results:\r\nExpect smart banners to work all the time.\r\n\r\nActual Results:\r\nSmart banners ONLY work after step 5 \u2014 specifically after building from Xcode on top of an App Store installation.\r\n\r\nRegression:\r\niOS 6.0 (10A403)\r\n\r\nNotes:\r\nAs far as I can tell, this makes Smart Banner testing completely impossible for pre-1.0 App Store apps. Similarly painful for existing products because the tester now needs the Xcode project and codesign / provisioning. This is a nonstarter for end-user beta testing, but even in many workplaces a QA team may not have source access. IPA installations from the Xcode Organizer do not work. Third-party OTA tools like TestFlight and Hockey are similarly out of luck.\r\n\r\nPlease revise this behavior to work with Debug and Ad-Hoc builds. This should ultimately be linked to the App's Bundle ID on the device side:\r\n\r\n1) Safari reads the app-id parameter from the meta tag\r\n2) Safari contacts the App Store for the related bundle ID\r\n3) Safari asks the system if an app with said bundle ID exists\r\n\r\nThese steps can simply be used as a fallback against the existing current mechanism, rather than replacing it completely.", "classification": "UI/Usability", "title": "Smart Banners require an App Store installation", "originated": "10/22/2012", "product_version": "10A403", "number": "12551140", "user": "matt@bookhousesoftware.com", "reproducible": "Always", "id": 2186401}, {"status": "Open", "resolved": "", "product": "Documentation", "description": "Please update the -[UIViewController viewDidLoad] reference to explain that method's role in the view lifecycle. With -viewDidUnload dead, it seems like -viewDidUnload will never be called more than once for a given view controller. If that's true, it would be nice to know. If that's NOT true, we need to know when and why that could happen, especially now that we've lost the parity that -viewDidUnload brought.\r\n\r\nDevs are probably assuming this (that it's now effectively a postponed initializer) right now. We need a formal confirmation/denial of the situation in iOS 6 or later.", "classification": "Serious Bug", "title": "Document state of -viewDidLoad in iOS 6+", "originated": "17-Oct-2012 03:59 PM", "product_version": "N/A", "number": "12522572", "user": "matt@bookhousesoftware.com", "reproducible": "N/A", "id": 2170401}, {"status": "Open", "resolved": "", "product": "Documentation", "description": "The UITextAlignment* constants have been deprecated in favor of, according to the docs, NS*TextAlignment. Those are the Mac constants from NSView.h. The ones you want are NSTextAlignment* in NSText.h, which is included in UIKit.", "classification": "Serious Bug", "title": "UITextAlignment deprecation recommends Mac API", "originated": "9/20/2012", "product_version": "Xcode 4.5 / iOS 6", "number": "12337502", "user": "matt@bookhousesoftware.com", "reproducible": "N/A", "id": 2014401}, {"status": "Open", "resolved": "", "product": "Developer Tools", "description": "Summary:\r\nI just accidentally typed\r\n\r\n// numberOfSegments is an NSUInteger property on UISegmentedControl\r\nfor (NSUInteger segmentIndex in self.segmentedControl.numberOfSegments) {\r\n  // ...\r\n}\r\n\r\nand suddenly realized how awesome it would be if that wasn't an error. Between fast enumeration and enumerateWithBlock: I've literally almost forgotten how to write for loops. So in that light maybe this isn't an awesome idea.\r\n\r\nNo, it's totally awesome. Guaranteed applause at WWDC 2013.", "classification": "Enhancement", "title": "ER: Fast / smart enumeration for primitives", "originated": "8/28/2012", "product_version": "N/A", "number": "12192393", "user": "matt@bookhousesoftware.com", "reproducible": "N/A", "id": 1898401}, {"status": "Open", "resolved": "", "product": "", "description": "Summary:\r\n\r\nThe ADC AppleID password field has disabled paste operations. The HTML for\r\n\r\nhttps://daw.apple.com/cgi-bin/WebObjects/DSAuthWeb.woa/wa/login\r\n\r\ncontains the following attributes on the paste input element:\r\n\r\n    onpaste=\"return false ;\"\r\n\r\nIf this is meant as some kind of security measure, it's naive. Apps and Safari Extensions such as 1Password walk the DOM to insert this info all the time, and can't be stopped from doing so. It also seems extremely unlikely that a malicious individual would script the browser to perform a user-level paste operation, let alone be deterred by this sort of thing. All the above markup does is aggravate honest iOS users with strong passwords who store them in an external utility, then paste them into Safari when needed.\r\n\r\nI log into many websites on a daily basis. ADC is only one that has this silly restriction. Please remove it. You're not protecting anybody.", "classification": "", "title": "ADC / AppleID password field won't paste", "originated": "6/19/12", "product_version": "", "number": "11705699", "user": "matt@bookhousesoftware.com", "reproducible": "", "id": 1780401}, {"status": "Open", "resolved": "", "product": "Developer Tools", "description": "05-Jun-2012 10:53 AM Matt Drance:\r\nSummary:\r\nXcode 4.3.2 (11E53) throws an assertion failure in +[DVTFilePath filePathForFileURL:]  when attempting to view a companion file from the ARC migration diff window.\r\n\r\nSteps to Reproduce:\r\n1) Create a new Single-View iOS Application WITHOUT ARC in Xcode.\r\n2) Edit > Refactor > Convert to Objective-C ARC\u2026\r\n3) Hit Continue / Next until you see the migration diff UI (it will likely show FooAppDelegate.m)\r\n4) In the path control at the top of the diff sheet, click on FooAppDelegate.m and select FooAppDelegate.h. See the attached screenshot for a demonstration\r\n\r\nExpected Results:\r\nI was expecting to see either the file I selected, or an explanation of why viewing the file isn't applicable or possible at this time.\r\n\r\nActual Results:\r\nAssertion failure. See attached log.\r\n\r\nRegression:\r\n4E2002 on 11E53\r\n\r\nNotes:\r\nI unfortunately did not discover this with an empty project. I discovered it with an enormous project in which I had spent more than two hours inspecting and tweaking the pending migration diffs. This is a brutal situation, specifically because (as far as I know) there is no way to save or snapshot your edits to pending changes. I will now have to make those changes all over again, from the beginning.\r\n\r\nIf the ARC diff tool doesn't support peeking at a companion file, whether because said file is not subject to migration or for some other reason, that's perfectly fine. But it shouldn't be a front-and-center option in the UI if that's the case.\r\n\r\nThere are plenty of reasons one would want to inspect a companion file during this process: to better understand the impact of the proposed changes; to simply remember what on earth you were thinking when you last looked at the code one or more years ago, etc. I think it's an important piece of functionality, but for now I'll just take no crashes. Please let me know if enabling this behavior for real warrants a separate bug report.", "classification": "Crash / Data Loss", "title": "4E2002: ARC diff window crashes viewing a companion file", "originated": "05-Jun-2012 10:53 AM", "product_version": "4.3.2 (4E2002)", "number": "11597820", "user": "matt@bookhousesoftware.com", "reproducible": "Always", "id": 1767401}, {"status": "Open", "resolved": "", "product": "Developer Tools", "description": "Summary:\r\nXcode no longer adds copied .m files to your target if they're accompanied by any other type of file.\r\n\r\nSteps to Reproduce:\r\n1) Create a new Xcode project\r\n2) Drag a .m file into the Project navigator. Xcode should offer to copy it, and pre-check the project's only target for inclusion\r\n3) Cancel\r\n4) Drag a .h and .m file into the Project navigator. Xcode no longer has the target checked\r\n\r\nExpected Results:\r\nExpect .m files to be added to my target as they always have, as is intuitive.\r\n\r\nActual Results:\r\nRead a ton of linker errors\r\n\r\nRegression:\r\nXcode 4.3 (4E109)\r\n\r\nNotes:\r\nThis used to work; I presume some cleverness was inserted to bail as soon as non-compilable files are found in the drag promise. It should really just ignore the n/a files and offer to add the rest to the target.", "classification": "Serious Bug", "title": "4E109: Dragged .m files no longer added to target if accompanied by a .h", "originated": "2/29/2012", "product_version": "4.3 (4E109)", "number": "10956704", "user": "matt@bookhousesoftware.com", "reproducible": "Always", "id": 1562401}, {"status": "Open", "resolved": "", "product": "Developer Tools", "description": "Summary:\r\nThe new UIViewController subclass file template includes an empty loadView method, which obfuscates any Storyboard work that's been associated with that class. The view controller has no view as a result and the developer is left to wonder why his project is broken.\r\n\r\nSteps to Reproduce:\r\n1) Create a new storyboard-based Single-View project\r\n2) Create a new UIViewController subclass file (name it \"CustomViewController\")\r\n3) Open the storyboard, and add a label and a button to the initial view controller\r\n4) From the storyboard, set the VC's Identity > Custom Class to CustomViewController\r\n5) Run \r\n\r\nExpected Results:\r\nExpect to see my button and label\r\n\r\nActual Results:\r\nSee a black screen, and \"Applications are expected to have a root view controller at the end of application launch\" in the Debug area\r\n\r\nRegression:\r\n4.3 (4E109). Did not occur in < 4.3\r\n\r\nNotes:\r\nIf you check \"With XIB for user interface\" then there is no loadView method in the resulting source file. The assumption here is that if you're not using a XIB, then you must be going code-only. But that is entirely untrue with storyboards: I'll be creating tons of XIB-less classes now, while still constructing my hierarchies in IB.\r\n\r\nIt doesn't help anyone to include loadView uncommented. It only confuses people who are trying to use Apple's newest recommended technologies. Anyone completely opting out of IB presumably understands that they'll need their own loadView method, and doesn't need a lot of help. Leaving it commented out with appropriate instructions in said comments is still friendly to less-experienced devs without overtly pulling the rug out from everyone else.", "classification": "Serious Bug", "title": "4E109: UIViewController template's loadView stub obfuscates storyboards", "originated": "2/29/2012", "product_version": "4.3 (4E109)", "number": "10956611", "user": "matt@bookhousesoftware.com", "reproducible": "", "id": 1550404}]}
